@model StoreManagement.Web.Areas.BasicData.ViewModels.EditInvoiceViewModel

@{
    ViewBag.Title = "Edit";
    var price = Model.Items.Sum(i => i.Price * i.Quantity);
    var date = Model.CreatedOnString;
}

<h2>ویرایش</h2>

<form id="invoiceForm">
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        <div class="validation-summary-errors text-danger" id="validSummery">
            <ul></ul>
        </div>
        <div class="form-group">
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.Version)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Number, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @class = "form-control", autofocus="autofocus" } })
                @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="CustomerId" class="form-control" data-val="true" data-val-number="The field مشتری must be a number. "
                        data-val-required="The مشتری field is required." name="CustomerId">
                    @foreach (var c in Model.Customers)
                    {
                        <option value="@c.Id">  @c.FirstName @c.LastName  </option>
                    }
                </select>
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CreatedOnString, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input data-val="true" data-val-required="تاریخ را وارد کنید." type="text" id="CreatedOnString" name="CreatedOnString" value="@date"/>
                <img src="https://sonomalibrary.org/sites/default/files/calendar.png" height="35px" width="35px" onclick="PersianDatePicker.Show(CreatedOnString,'@date' );">

                @Html.ValidationMessageFor(model => model.CreatedOnString, "", new { @class = "text-danger" })

            </div>
        </div>
        <hr />
        <div id="jsGrid">

        </div>

        <div class="form-group">
            @Html.Label("قیمت کل", htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(value => price, new { htmlAttributes = new { @class = "form-control", id = "text" } })
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" id="saveButton" onclick="save_js();" class="btn btn-default">  ذخیره  </button>
            </div>
        </div>
    </div>
</form>


<div>
    @Html.ActionLink("بازگشت به لیست فاکتورها", "List")
</div>


@section css{
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.0/themes/base/jquery-ui.css">
    <link type="text/css" rel="stylesheet" href="~/Content/jsgrid.min.css" />
    <link type="text/css" rel="stylesheet" href="~/Content/jsgrid-theme.min.css" />
    <link type="text/css" href="~/Content/PersianDatePicker.min.css" rel="stylesheet" />

}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="~/Scripts/PersianDatePicker.min.js"></script>

    <script src="https://code.jquery.com/ui/1.12.0/jquery-ui.js"></script>

    <!--   the above is for page edit warning  -->
    <script type="text/javascript" src="~/Scripts/jsgrid.min.js"></script>
    <script type="text/javascript">
        var products = [];
        products.push({Id: 0, Name: "", Price: "0"})
        @foreach (var p in Model.Products)
        {
            @:products.push({Id: @p.Id, Name: "@p.Name", Price: "@p.Price"});
                                                                                                                        }
        var Items = [];
        @foreach(var item in Model.Items)
        {
            @: Items.push({Id: @item.Id, InvoiceId: @item.InvoiceId, ProductId: @item.ProductId, Quantity: "@item.Quantity", Price: "@item.Price", priceAll: @item.Price * @item.Quantity});

        }

        function FindProduct(productId){
            var prod = products.find(function(p)
            {
                return p.Id === productId;
            });
            return prod;
        }

        function UpdateTotalPrice(){
            var sum =0;
            for(var i=0; i<Items.length; i++){
                sum = sum + Items[i].priceAll;
                $('#text').val(sum.toString());
            }
        }

        function DoWhenHittingEnter($result,job){
            $result.on("keydown",function(e){
                if(e.which == 13){
                    $("#jsGrid").jsGrid(job);
                    return false;
                }
            });
        }


        $("#jsGrid").jsGrid({
            width: "100%",
            height: "400px",

            inserting: true,
            editing: true,
            sorting: true,
            paging: true,

            noDataContent: ".کالایی وجود ندارد",

            controller:
            {
                insertItem: function(item){
                    var prod = FindProduct(item.ProductId);
                    item.Price = prod.Price;
                    item.priceAll = item.Price * item.Quantity;
                    item.InvoiceId = @Model.Id;
                    $("#jsGrid").jsGrid("clearInsert");
                    return item;
                }
            },
            onItemUpdating: function(args){
                if(args.item.Price != args.previousItem.Price ||
                    args.item.Quantity != args.previousItem.Quantity)
                {
                    args.item.priceAll = args.item.Price * args.item.Quantity;
                }
                if(args.item.priceAll != args.previousItem.priceAll){
                    args.item.Price = args.item.priceAll / args.item.Quantity;
                }
                if(args.item.ProductId != args.previousItem.ProductId){
                    var prod = FindProduct(args.item.ProductId);
                    args.item.Price = prod.Price;
                    args.item.priceAll = args.item.Price * args.item.Quantity;
                }

            },

            onItemInserted: function(args){
                UpdateTotalPrice();

            },

            onItemUpdated: function(args){
                UpdateTotalPrice();

            },
            onItemDeleted: function(args){
                if(Items.length != 0)
                    UpdateTotalPrice();
                else
                    $("#text").val("0");
            },


            data: Items,

            invalidMessage:"",
            fields: [
                { name: "ProductId", title: "کالا", type: "select", items: products, valueField: "Id", textField: "Name",
                    validate:{
                        validator: function(value,item,param){
                            if(value != 0){
                                return true;
                            }
                        },
                        message: "کالا را انتخاب کنید."
                    },
                    editTemplate: function(value){
                        var $result = jsGrid.fields.select.prototype.editTemplate.call(this, value);
                        DoWhenHittingEnter($result,"updateItem");
                        return $result;
                    },
                    insertTemplate: function(value){
                        var $result = jsGrid.fields.select.prototype.insertTemplate.call(this,value);
                        DoWhenHittingEnter($result,"insertItem");
                        return $result;
                    }
                },
                { name: "Quantity", title:"تعداد", type: "number",validate: {
                    validator: "range",
                    message:  "تعداد کالا باید بین 1 تا 100 باشد." ,
                    param: [1,100],
                    width: 60 },
                    editTemplate: function(value){
                        var $result = jsGrid.fields.number.prototype.editTemplate.call(this, value);
                        DoWhenHittingEnter($result,"updateItem");
                        return $result;
                    },
                    insertTemplate: function(value){
                        var $result = jsGrid.fields.number.prototype.insertTemplate.call(this,value);
                        DoWhenHittingEnter($result,"insertItem");
                        return $result;
                    }
                },

                { name: "Price",title: "فی", type: "number", width: 100,
                    editTemplate: function(value){
                        var $result = jsGrid.fields.number.prototype.editTemplate.call(this, value);
                        DoWhenHittingEnter($result,"updateItem");
                        return $result;
                    },
                    insertTemplate: function(value){
                        var $result = jsGrid.fields.number.prototype.insertTemplate.call(this,value);
                        DoWhenHittingEnter($result,"insertItem");
                        return $result;
                    }},
                { name: "priceAll", title: "قیمت", type: "number", width: 100,
                    editTemplate: function(value){
                        var $result = jsGrid.fields.number.prototype.editTemplate.call(this, value);
                        DoWhenHittingEnter($result,"updateItem");
                        return $result;
                    },
                    insertTemplate: function(value){
                        var $result = jsGrid.fields.number.prototype.insertTemplate.call(this,value);
                        DoWhenHittingEnter($result,"insertItem");
                        return $result;
                    }},
                { type: "control" ,modeSwitchButton: false, editButton: false }
            ]
        });

        function save_js(){
            var inputs=[];
            $("#invoiceForm div.form-group :input").each(function(){inputs.push($(this).val())});
            var model={
                Id: inputs[0],
                Version: inputs[1],
                Number: inputs[2],
                CustomerId: inputs[3],
                CreatedOnString: inputs[4],
                Items: Items
            };
            $("#validSummery").empty();
            if(Items.length == 0){
                $("<li>کالایی در فاکتور وجود ندارد</li>").appendTo($("#validSummery"));
            }
            if($("#invoiceForm").valid() && Items.length != 0){
                $.ajax({
                    type: 'POST',
                    url: '/basicdata/invoice/edit',
                    data: model,
                    dataType: 'Json',
                    success: function(data){
                        if(data.success === true){
                            alert("ذخیره شد");
                            document.location='@Url.Action("List","Invoice")';
                        }
                        else{
                            $("#validSummery").empty();
                            $("<li>این فاکتور قبلا در سیستم توسط فرد دیگری ویرایش شده است.صفحه را رفرش کنید</li>").appendTo($("#validSummery")); 
                        }
                    },
                    failure: function(data){
                        alert("ذخیره نشد");
                    }
                });
            }
            else{


            }

        }


    </script>
}
